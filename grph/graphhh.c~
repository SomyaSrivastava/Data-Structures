
#include<stdio.h>
#include<stdlib.h>
#include "Character_stack.h"
#include "q.h"

//#define MAX 100
typedef struct Graph
{
char label[MAX];
int adj[MAX][MAX];
int count;
int weight[MAX][MAX];
}GRAPH;

int calad(char c,GRAPH G,char ad[MAX],int *out,int index[MAX]);

void init(GRAPH *G)
{
int i,j;
G->count=0;
G->label[0]='\0';
for(i=0;i<MAX;i++)
	{
		for(j=0;j<MAX;j++)
		{
			G->adj[i][j]=0;
			if(i==j)
				G->weight[i][j]=0;
			else			
				G->weight[i][j]=999;
		}
	}
}
int searchnode(char s,GRAPH G)
{
int i;
for(i=0;i<G.count;i++)
{
	if(G.label[i]==s)
		break;
}
if(i==G.count)
	return -1;
else 
	return i;
}

int createnode(char c,GRAPH *G)
{
int s;
if(G->count > MAX || G->count==MAX)
	return 0;
else if(searchnode(c,*G)!=-1)
	return 1;
else
	{
		G->label[G->count]=c;
		G->count++;
		
		return 1;
	}
}

int createdge(char s,char d,GRAPH *G)
{
int i,j;
i=searchnode(s,*G);
j=searchnode(d,*G);
if(i==-1 && j==-1)
	return 0;
else
{
	G->adj[i][j]=1;
	return 1;
}

}
int creatweightededge(char s,char d,GRAPH *G,int w)
{
int i,j;
i=searchnode(s,*G);
j=searchnode(d,*G);
if(i==-1 && j==-1)
	return 0;
else
{
	G->adj[i][j]=1;
	G->weight[i][j]=w;
	return 1;
}

}

int outdegree(char s,GRAPH G,int *out)
{
int i,j;
*out=0;
i=searchnode(s,G);
if(i==-1)
	return 0;
else
{
	for(j=0;j<G.count;j++)
	{
		if(G.adj[i][j]==1)
			++(*out);
	}
	return 1;
}

}
int indegree(char s,GRAPH G,int *in)
{
int i,j;
*in=0;
i=searchnode(s,G);
if(i==-1)
	return 0;
else
{
	for(j=0;j<G.count;j++)
	{
		if(G.adj[j][i]==1)
			++(*in);
	}
	return 1;
}

}

int removenode(char c,GRAPH *G)
{
int i,k,j;
i=searchnode(c,*G);
if(i==-1)
	return 0;

else if(G->label[i+1]!='\0')
	{
		for(j=i;j<G->count;j++)
			G->label[j]=G->label[j+1];	
		G->label[j+1]='\0';
		
		//printf("%s \n",G->label);
		for(k=0;k<G->count;k++)
		{
			G->adj[i][k]=G->adj[i+1][k];
		}
		for(j=0;j<G->count;j++)
		{
			G->adj[j][i]=G->adj[j][i+1];
		}
		--G->count;
	}
else if(G->label[i+1]=='\0')
	{
		G->label[i]='\0';		
		--(G->count);
	}


return 1;
}

int removedge(char s,char d,GRAPH *G)
{
 int i,j;
 i=searchnode(s,*G);
 j=searchnode(d,*G);
 
 if(i==-1 || j==-1)
  	return 0;
  else
  {
  	G->adj[i][j]=0;
  }

	return 1;

}

void displayG(GRAPH G)
{
int i,j;
if(G.label[0]=='\0')
{
	printf("\n EMPTY MATRIX ! ");
}
else
{
	printf("  %c",G.label[0]);
	for(i=1;i<G.count;i++)
	{
		printf(" %c",G.label[i]);
	}
	printf("\n");
	for(i=0;i<G.count;i++)
	{
		printf("%c ",G.label[i]);
		for(j=0;j<G.count;j++)
		{
			printf("%d ",G.adj[i][j]);
		}
		printf("\n");
	}
}
}
int calad(char c,GRAPH G,char ad[MAX],int *out,int index[MAX])
{
int i,j;
*out=0;
int k=0;
//index[MAX]={0};
i=searchnode(c,G);
if(i==-1)
	return 0;
else
{
	for(j=0;j<G.count;j++)
	{
		if(G.adj[i][j]==1)
			{
				ad[k]=G.label[j];
				index[k]=j;
				++k;			
				++(*out);
			}
	}
	return 1;
}

}

void BFS(GRAPH G)
{
	int j,i;
	char ad[MAX];
	int   out=0;
	QUEUE Q;
	int v[MAX]={0};
	int index[MAX]={0};
	char bfs[MAX];
	int k=0;
	char elem;
	initQ(&Q);

	for(j=0;j<G.count;j++)
	{
		if(!v[j])
		{	
			calad(G.label[j],G,ad,&out,index);
			
				if(enque(&Q,G.label[j]))
				{
					v[j]=1;
				}

				if(dequeue(&Q,&elem))
				{
					bfs[k]=elem;
					++k;
				}

				for(i=0;i<out;i++)
				{
					if(!v[index[i]])
					{	
						enque(&Q,ad[i]);
						v[index[i]]=1;
					}
				}

				while(Q.rear != -1)
				{
					if(dequeue(&Q,&elem))
					{
						bfs[k]=elem;
						++k;
					}
				}
			bfs[k]='\0';
			
	
		}
	}
	printf("%s",bfs);
}

void DFS(GRAPH G)
{
	int j,i;
	char ad[MAX];
	int out=0;
	STACK S;
	int v[MAX]={0};
	int index[MAX];
	char dfs[MAX];
	int k=0;
	char elem;
	initS(&S);


	for(j=0;j<G.count;j++)
	{
		if(!v[j])
		{	
			if(calad(G.label[j],G,ad,&out,index))
			{
				if(push(&S,G.label[j]))
				{
					v[j]=1;
				}

				if(pop(&S,&elem))
				{
					dfs[k]=elem;
					++k;
				}

				for(i=0;i<out;i++)
				{
					if(!v[index[i]])
					{
						push(&S,ad[i]);
						v[index[i]]=1;
					}
				}

				while(!is_Empty(S))
				{
					if(pop(&S,&elem))
					{
						dfs[k]=elem;
						++k;
					}
				}
				dfs[k]='\0';
			}
	
		}
	}
	printf("%s",dfs);

}

void tps(GRAPH G)
{
int i,k,j;
char TPS[MAX];
int in;
int flag=0;
GRAPH C;
init(&C);
C.count=G.count;
for(i=0;i<G.count;i++)
{
	C.label[i]=G.label[i];
	for(j=0;j<G.count;j++)
		C.adj[i][j]=G.adj[i][j];	
}
k=0;
i=0;
j=C.count;
//indegree(C.label[i],C,&in);
		while(C.count!=0)
		{	
			for(i=0;i<C.count;i++)
			{	
				indegree(C.label[i],C,&in);
				if(in==0)
				{
					//printf("\n %s",C.label);
					TPS[k]=C.label[i];		
					++k;			
					removenode(C.label[i],&C);
					//printf("\n %s",C.label);
					if(i==0)
						i=-1;
					else
						i=i-1;
				}
			}
			
		 }
		 
	TPS[k]='\0';
	printf("\n %s",TPS);
}

void warshall(GRAPH G)
{
int i,k,j;
int in;
int path[MAX][MAX];

if(G.count!=0)
{
	for(i=0;i<G.count;i++)
	{
		for(j=0;j<G.count;j++)
			path[i][j]=G.adj[i][j];	
	}

	for(i=0;i<G.count;i++)
	{
		//path[i][i]=0;
		for(j=0;j<G.count;j++)
		{
			for(k=0;k<G.count;k++)
			{
								
				path[i][j]=path[i][j] | (path[i][k]&path[k][j]);
			}
		}
	}
	printf("\n ADJACENCY MATRIX :\n");
	displayG(G);


		printf("\n PATH MATRIX :\n");
		printf("  %c",G.label[0]);
		for(i=1;i<G.count;i++)
		{
			printf(" %c",G.label[i]);
		}
		printf("\n");
		for(i=0;i<G.count;i++)
		{
			printf("%c ",G.label[i]);
			for(j=0;j<G.count;j++)
			{
				printf("%d ",path[i][j]);
			}
			printf("\n");
		}
	

}
else 
printf("\n EMPTY MATRIX ! ");
}


void displayGW(GRAPH G)
{
int i,j;
if(G.count)
{
	displayG(G);
	printf("\n");
	printf("\n COST MATRIX : \n");
	printf("   %3c",G.label[0]);
		for(i=1;i<G.count;i++)
		{
			printf(" %3c",G.label[i]);
		}
		printf("\n");
		for(i=0;i<G.count;i++)
		{
			printf(" %3c ",G.label[i]);
			for(j=0;j<G.count;j++)
			{
				printf("%3d ",G.weight[i][j]);
			}
			printf("\n");
		}
}
else 
printf("\nERROR");

}

void floydwarshall(GRAPH G)
{
char path[G.count][G.count];
int i,k,j;

for(i=0;i<G.count;i++)
{
	for(j=0;j<G.count;j++)
	{
		path[i][j]='-';
	}
}


for(i=0;i<G.count;i++)
{
	G.weight[i][i]=0;
	for(j=0;j<G.count;j++)
	{
		for(k=0;k<G.count;k++)
		{
			if(G.weight[i][j]  > (G.weight[i][k] + G.weight[k][j]))
				{
					G.weight[i][j]=G.weight[i][k] + G.weight[k][j];
					path[i][j]=G.label[k];
				}
		}
	}
}

displayGW(G);

printf("\n PATH MATRIX : \n");
printf("  %c",G.label[0]);
	for(i=1;i<G.count;i++)
	{
		printf(" %c",G.label[i]);
	}
	printf("\n");
	for(i=0;i<G.count;i++)
	{
		printf("%c ",G.label[i]);
		for(j=0;j<G.count;j++)
		{
			printf("%c ",path[i][j]);
		}
		printf("\n");
	}



}






void main()
{
GRAPH G;
char c,s,d;
int ch,i,w;
int out,in,flag;
char ad[MAX];
int index[MAX];

init(&G);
printf("\n DO YOU WISH TO CREATE A WEIGHTED GRAPH ? (PRESS 1 FOR YES OR 0 FOR NO) : ");
scanf("%d",&flag);
while(1)
{
	printf("\nMENU \n1.CREATE NODE \n2.CREATE EDGE \n3.CALCULATE OUT DEGREE \n4.CALCULATE IN DEGREE \n5.REMOVE EDGER \n6.REMOVE NODE \n7.DISPLAY \n8.CALCULATE ADJACENT NODES \n9.DFS \n10.BFS \n11.Topological sorting \n12.Warshall \n13.FLOYD WARSHALL \n 0 TO EXIT \nENTER CHOICE :");
	scanf("%d",&ch);
	switch(ch)
	{
	case 1 :	printf("\n ENTER NODE : ");
			getchar();			
			scanf("%c",&c);
			
			if(createnode(c,&G))
				displayG(G);
			else 
				printf("\n ERROR");
			break;
	case 2 :
			printf("\n ENTER SOURCE NODE : ");
			getchar();
			scanf("%c",&s);
			
			printf("\n ENTER DESTINATION NODE : ");
			getchar();
			scanf("%c",&d);
			
			if(!flag)
			{
				if(createdge(s,d,&G))
					displayG(G);
				else 
					printf("\n ERROR");
			}
			else
			{
				printf("\n ENTER WEIGHT FOR THE EDGE : ");
				scanf("%d",&w);
				if(creatweightededge(s,d,&G,w))						
						displayGW(G);
				else
					printf("\n ERROR");

			}

			break;

	case 3 :
			
			printf("\n ENTER SOURCE NODE : ");
			getchar();			
			scanf("%c",&s);
			if(outdegree(s,G,&out))
				printf("\n OUTDEGREE IS %d",out);
			else 
				printf("\n ERROR");
			break;
	case 4 :
			printf("\n ENTER SOURCE NODE : ");
			getchar();			
			scanf("%c",&s);
			
			if(indegree(s,G,&in))
				printf("\n INDEGREE IS %d",in);			
			else 
				printf("\n ERROR");
			break;
	case 5 :
			printf("\n ENTER SOURCE NODE : ");
			getchar();			
			scanf("%c",&s);
			

			printf("\n ENTER DESTINATION NODE : ");
			getchar();			
			scanf("%c",&d);
			
			if(removedge(s,d,&G))
				displayG(G);
			else 
				printf("\n ERROR");
			break;
	case 6 :
			printf("\n ENTER NODE : ");
			getchar();		
			scanf("%c",&c);
		
			if(removenode(c,&G))
				displayG(G);
			else 
				printf("\n ERROR");
			break;
	case 7 :
			displayG(G);
			break;
	case 8 :
			printf("\n ENTER NODE : ");
			getchar();		
			scanf("%c",&c);

			if(calad(c,G,ad,&out,index))
			{
				for(i=0;i<out;i++)
				{
					printf("%c is adjacent to %c (%d index) \n",c,ad[i],index[i]);
				}			
			}
			else {printf("\n ERROR");}break;
	case 9 : 
			DFS(G);
			break;
	case 10 :
			BFS(G);
			break;
	case 11 :
			tps(G);
			break;	
	case 12 :
			warshall(G);
			break;
	case 13 :
			floydwarshall(G);
			break;

	default :
				exit(0);
	}
}			



}























